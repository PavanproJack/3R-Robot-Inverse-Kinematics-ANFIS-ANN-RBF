%Neural Network
% This code will solve the inverse kinematics of a 2R Planar robot
clc;
clear;
close all;
l_1= 10;
l_2= 7;
l_3 = 5;
% Training points of the revolute angle 1 and 2
qt1= 0:0.5*pi/180:90*pi/180;
qt2 = 0:0.5*pi/180:90*pi/180;
qt3 = 0:0.5*pi/180:90*pi/180;

[Qt1 Qt2]=meshgrid (qt1,qt2);
Qtr1=[reshape(Qt1,1,[])]';
Qtr2=[reshape(Qt2,1,[])]';

% The training end-effector positions at varying revolute angles 
xt= l_1 *cos(Qtr1)+ l_2* cos(Qtr1+Qtr2);
yt= l_1 *sin(Qtr1)+ l_2* sin(Qtr1+Qtr2);

% % The matrix of the training data (3 by n)
datatr1= [xt yt Qtr1];% system 1
inputs1= [xt';yt'];
target1=[Qtr1'];
net1=feedforwardnet(50);
net_sys1=train(net1,inputs1,target1);
save net_sys1;
load net_sys1;



